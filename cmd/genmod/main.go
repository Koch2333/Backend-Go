package main

import (
	"bytes"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

func main() {
	repoRoot := mustRepoRoot()
	modPath := mustModulePath(repoRoot)

	// 扫描 internal/**/module.go
	var imports []string
	_ = filepath.WalkDir(filepath.Join(repoRoot, "internal"), func(p string, d fs.DirEntry, err error) error {
		if err != nil || d.IsDir() {
			return nil
		}
		if strings.EqualFold(filepath.Base(p), "module.go") {
			rel, _ := filepath.Rel(repoRoot, filepath.Dir(p))
			imp := pathJoin(modPath, filepath.ToSlash(rel))
			// 排除 bootstrap 自身
			if strings.Contains(imp, "/internal/bootstrap/") {
				return nil
			}
			imports = append(imports, imp)
		}
		return nil
	})
	if len(imports) == 0 {
		fmt.Println("[genmod] no module.go found under internal/")
	}

	sort.Strings(imports)
	var buf bytes.Buffer
	buf.WriteString("// Code generated by cmd/genmod; DO NOT EDIT.\n")
	buf.WriteString("package mod\n\n")
	buf.WriteString("// This file imports all modules with module.go so their init() can register.\n")
	buf.WriteString("import (\n")
	for _, imp := range imports {
		fmt.Fprintf(&buf, "\t_ %q\n", imp)
	}
	buf.WriteString(")\n")

	out := filepath.Join(repoRoot, "internal", "bootstrap", "mod", "autogen_imports.go")
	if err := os.MkdirAll(filepath.Dir(out), 0o755); err != nil {
		panic(err)
	}
	if err := os.WriteFile(out, buf.Bytes(), 0o644); err != nil {
		panic(err)
	}
	fmt.Printf("[genmod] wrote %s with %d imports\n", out, len(imports))
}

func mustRepoRoot() string {
	wd, _ := os.Getwd()
	// 允许从任意子目录执行：向上找 go.mod
	dir := wd
	for {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	panic("go.mod not found (run from repo root or any subfolder)")
}

func mustModulePath(root string) string {
	data, err := os.ReadFile(filepath.Join(root, "go.mod"))
	if err != nil {
		panic(err)
	}
	lines := strings.Split(string(data), "\n")
	for _, ln := range lines {
		ln = strings.TrimSpace(ln)
		if strings.HasPrefix(ln, "module ") {
			return strings.TrimSpace(strings.TrimPrefix(ln, "module "))
		}
	}
	panic("module path not found in go.mod")
}

func pathJoin(a, b string) string {
	if strings.HasSuffix(a, "/") {
		return a + strings.TrimPrefix(b, "/")
	}
	return a + "/" + strings.TrimPrefix(b, "/")
}
